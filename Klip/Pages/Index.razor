@page "/"
@page "/{Encoded}"

@using System.IO
@using System.Text;
@using System.Threading;
@using LzmaEncoder = SevenZip.Compression.LZMA.Encoder;
@using LzmaDecoder = SevenZip.Compression.LZMA.Decoder;

@inject NavigationManager navManager
@inject IJSRuntime JSRuntime

<form class="flex-grow-1 d-flex flex-column">
    <div class="form-group flex-grow-1 mb-3">
        <textarea class="form-control h-100 bg-dark text-matrix shadow-lg border-0 cascadia-code" placeholder="Your klip goes here..." id="inputTextArea" @bind="@Decoded" @oninput="@PasteChangedAsync"></textarea>
    </div>
    <div class="input-group input-group-lg justify-content-end">
        <button class="btn btn-outline-light" type="button" @onclick="@CopyUrlToClipboard">Copy URL</button>
        <button class="btn btn-outline-light" type="button" @onclick="@CopyMarkdownToClipboard">Copy Markdown</button>
    </div>
</form>

@code
{
    public string Decoded { get; private set; } = string.Empty;

    [Parameter]
    public string Encoded { get; set; }

    private static readonly LzmaDecoder decoder = new LzmaDecoder();
    private static readonly LzmaEncoder encoder = new LzmaEncoder();
    private CancellationTokenSource ctsource = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        var encoded = Encoded ?? string.Empty;
        var unescaped = Uri.UnescapeDataString(encoded);
        var bytes = Convert.FromBase64String(unescaped);

        using var ims = new MemoryStream(bytes);
        using var oms = new MemoryStream();

        var props = new byte[5];
        ims.Read(props, 0, 5);
        var lenBytes = new byte[8];
        ims.Read(lenBytes, 0, 8);
        var len = BitConverter.ToInt64(lenBytes, 0);

        decoder.SetDecoderProperties(props);
        decoder.Code(ims, oms, ims.Length, len, null);
        oms.Flush();

        var inflated = oms.ToArray();
        var decoded = Encoding.UTF8.GetString(inflated);

        Decoded = decoded;
    }

    protected async Task PasteChangedAsync(ChangeEventArgs args)
    {
        ctsource.Cancel();
        ctsource = new CancellationTokenSource();

        // waits half a second. if no further entry, generates.
        await Task.Delay(500).ContinueWith(t =>
        {
            var plaintext = args.Value.ToString();
            var bytes = Encoding.UTF8.GetBytes(plaintext);

            using var ims = new MemoryStream(bytes);
            using var oms = new MemoryStream();

            encoder.WriteCoderProperties(oms);
            oms.Write(BitConverter.GetBytes(ims.Length), 0, 8);
            encoder.Code(ims, oms, ims.Length, -1, null);
            oms.Flush();

            var deflated = oms.ToArray();
            var encoded = Convert.ToBase64String(deflated);
            var escaped = Uri.EscapeDataString(encoded);

            var uri = $"{navManager.BaseUri}{escaped}";
            navManager.NavigateTo(uri);
        }, ctsource.Token);
    }

    protected async Task CopyUrlToClipboard()
    {
        var escaped = Uri.EscapeDataString(Encoded);
        var uri = $"{navManager.BaseUri}{escaped}";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", uri);
    }

    protected async Task CopyMarkdownToClipboard()
    {
        var escaped = Uri.EscapeDataString(Encoded);
        var markdown = $"[paste]({navManager.BaseUri}{escaped})";
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", markdown);
    }
}
